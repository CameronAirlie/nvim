return {
  -- Auto Completion
  -- {
  --   'saghen/blink.cmp',
  --   -- optional: provides snippets for the snippet source
  --   dependencies = {
  --     'rafamadriz/friendly-snippets',
  --     'giuxtaposition/blink-cmp-copilot',
  --   },

  --   -- use a release tag to download pre-built binaries
  --   version = '1.*',
  --   -- AND/OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust
  --   -- build = 'cargo build --release',
  --   -- If you use nix, you can build from source using latest nightly rust with:
  --   -- build = 'nix run .#build-plugin',

  --   ---@module 'blink.cmp'
  --   ---@type blink.cmp.Config
  --   opts = {
  --     -- 'default' (recommended) for mappings similar to built-in completions (C-y to accept)
  --     -- 'super-tab' for mappings similar to vscode (tab to accept)
  --     -- 'enter' for enter to accept
  --     -- 'none' for no mappings
  --     --
  --     -- All presets have the following mappings:
  --     -- C-space: Open menu or open docs if already open
  --     -- C-n/C-p or Up/Down: Select next/previous item
  --     -- C-e: Hide menu
  --     -- C-k: Toggle signature help (if signature.enabled = true)
  --     --
  --     -- See :h blink-cmp-config-keymap for defining your own keymap
  --     keymap = {
  --       preset = 'default',
  --       ['<C-n>'] = {
  --         'show',
  --         'select_next',
  --         'fallback'
  --       },
  --       ['<C-l>'] = {
  --         'show_documentation',
  --         'hide_documentation'
  --       }
  --     },

  --     appearance = {
  --       -- 'mono' (default) for 'Nerd Font Mono' or 'normal' for 'Nerd Font'
  --       -- Adjusts spacing to ensure icons are aligned
  --       nerd_font_variant = 'mono'
  --     },

  --     -- (Default) Only show the documentation popup when manually triggered
  --     completion = {
  --       documentation = {
  --         auto_show = true,
  --         window = {
  --           border = 'rounded',
  --           winhighlight = "Normal:Normal,FloatBorder:FloatBorder,CursorLine:BlinkCmpMenuSelection,Search:None",
  --           winblend = 10
  --         }
  --       },
  --       menu = {
  --         winblend = 10,
  --         border = 'rounded',
  --         winhighlight = "Normal:Normal,FloatBorder:FloatBorder,CursorLine:BlinkCmpMenuSelection,Search:None"
  --       },
  --     },
  --     signature = {
  --       enabled = true,
  --       window = {
  --         border = 'rounded',
  --         winblend = 10,
  --         winhighlight = "Normal:Normal,FloatBorder:FloatBorder,CursorLine:BlinkCmpMenuSelection,Search:None"
  --       }
  --     },

  --     -- Default list of enabled providers defined so that you can extend it
  --     -- elsewhere in your config, without redefining it, due to `opts_extend`
  --     sources = {
  --       default = { 'lsp', 'path', 'snippets', 'buffer', 'copilot' },
  --       providers = {
  --         copilot = {
  --           name = "copilot",
  --           module = "blink-cmp-copilot",
  --           score_offset = 100,
  --           async = true,
  --         },
  --       },
  --     },

  --     -- (Default) Rust fuzzy matcher for typo resistance and significantly better performance
  --     -- You may use a lua implementation instead by using `implementation = "lua"` or fallback to the lua implementation,
  --     -- when the Rust fuzzy matcher is not available, by using `implementation = "prefer_rust"`
  --     --
  --     -- See the fuzzy documentation for more information
  --     fuzzy = { implementation = "prefer_rust_with_warning" }
  --   },
  --   opts_extend = { "sources.default" }
  -- },

--   {
--     "giuxtaposition/blink-cmp-copilot",
--   },

--   {
--     'neovim/nvim-lspconfig',
--     dependencies = { 'saghen/blink.cmp' },
--     config = function(_, opts)
--     end
--   },

--   { "onsails/lspkind.nvim" },
--   { 'williamboman/mason.nvim' },
--   { 'williamboman/mason-lspconfig.nvim' },
--   {
--     "pmizio/typescript-tools.nvim",
--     dependencies = { "nvim-lua/plenary.nvim", "neovim/nvim-lspconfig" },
--     opts = {},
--     event = "BufEnter",
--   },

--   {
--     "zbirenbaum/copilot.lua",
--     event = "InsertEnter",
--     opts = {
--       suggestion = {
--         enabled = false,
--         auto_trigger = true,
--       },
--       panel = {
--         enabled = false
--       }
--     },
--   },
--   {
--     "onsails/lspkind.nvim",
--     config = function()
--       require("lspkind").init({})
--     end,
--   },

--   {
--     'nvim-treesitter/nvim-treesitter',
--     build = ":TSUpdate",
--     event = { "BufRead" },
--     config = function()
--       require('nvim-treesitter.configs').setup {
--         ensure_installed = {
--           "bash",
--           "c",
--           "cpp",
--           "css",
--           "dockerfile",
--           "go",
--           "graphql",
--           "html",
--           "javascript",
--           "json",
--           "lua",
--           "python",
--           "rust",
--           "scss",
--           "typescript",
--           "tsx",
--           "yaml",
--           "toml",
--         },
--         sync_install = false,
--         auto_install = true,
--         highlight = {
--           enable = true
--         }
--       }
--     end,
--   },

--   {
--     "luckasRanarison/tailwind-tools.nvim",
--     name = "tailwind-tools",
--     build = ":UpdateRemotePlugins",
--     dependencies = {
--       "nvim-treesitter/nvim-treesitter",
--       "nvim-telescope/telescope.nvim", -- optional
--       "neovim/nvim-lspconfig",         -- optional
--     },
--     opts = {}                          -- your configuration
--   },

--   {
--     "rachartier/tiny-inline-diagnostic.nvim",
--     event = "LspAttach",
--     priority = 1000,
--     config = function()
--       require('tiny-inline-diagnostic').setup({
--         preset = "simple",
--         options = {
--           -- enable_on_insert = true,
--           throttle = 10,
--         },
--         blend = {
--           factor = 0.5,
--         }
--       })
--       -- vim.diagnostic.config({ virtual_text = false }) -- Only if needed in your configuration, if you already have native LSP diagnostics
--     end
--   },
--   {
--     "rachartier/tiny-code-action.nvim",
--     dependencies = {
--       { "nvim-lua/plenary.nvim" },
--       { "nvim-telescope/telescope.nvim" },
--     },
--     event = "LspAttach",
--     config = function()
--       require('tiny-code-action').setup()
--     end
--   },


--   {
--     "dgagn/diagflow.nvim",
--     event = "BufRead",
--   },
}
